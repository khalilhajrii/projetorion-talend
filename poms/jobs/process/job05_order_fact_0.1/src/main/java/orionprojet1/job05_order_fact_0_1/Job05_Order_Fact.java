// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package orionprojet1.job05_order_fact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Job05_Order_Fact Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Job05_Order_Fact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Job05_Order_Fact";
	private final String projectName = "ORIONPROJET1";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Job05_Order_Fact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Job05_Order_Fact.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_order_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_customer_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class order_factStruct implements routines.system.IPersistableRow<order_factStruct> {
		final static byte[] commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		static byte[] commonByteArray_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double Customer_ID;

		public Double getCustomer_ID() {
			return this.Customer_ID;
		}

		public Double Employee_ID;

		public Double getEmployee_ID() {
			return this.Employee_ID;
		}

		public Double Street_ID;

		public Double getStreet_ID() {
			return this.Street_ID;
		}

		public Double Product_ID;

		public Double getProduct_ID() {
			return this.Product_ID;
		}

		public java.util.Date Order_Date;

		public java.util.Date getOrder_Date() {
			return this.Order_Date;
		}

		public Double Order_ID;

		public Double getOrder_ID() {
			return this.Order_ID;
		}

		public Double Order_Type;

		public Double getOrder_Type() {
			return this.Order_Type;
		}

		public java.util.Date Delivery_Date;

		public java.util.Date getDelivery_Date() {
			return this.Delivery_Date;
		}

		public Double Quantity;

		public Double getQuantity() {
			return this.Quantity;
		}

		public Double Total_Retail_Proce;

		public Double getTotal_Retail_Proce() {
			return this.Total_Retail_Proce;
		}

		public Double Costprice_Per_Unit;

		public Double getCostprice_Per_Unit() {
			return this.Costprice_Per_Unit;
		}

		public Double Discount;

		public Double getDiscount() {
			return this.Discount;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Customer_ID == null) ? 0 : this.Customer_ID.hashCode());

				result = prime * result + ((this.Employee_ID == null) ? 0 : this.Employee_ID.hashCode());

				result = prime * result + ((this.Street_ID == null) ? 0 : this.Street_ID.hashCode());

				result = prime * result + ((this.Product_ID == null) ? 0 : this.Product_ID.hashCode());

				result = prime * result + ((this.Order_Date == null) ? 0 : this.Order_Date.hashCode());

				result = prime * result + ((this.Order_ID == null) ? 0 : this.Order_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final order_factStruct other = (order_factStruct) obj;

			if (this.Customer_ID == null) {
				if (other.Customer_ID != null)
					return false;

			} else if (!this.Customer_ID.equals(other.Customer_ID))

				return false;

			if (this.Employee_ID == null) {
				if (other.Employee_ID != null)
					return false;

			} else if (!this.Employee_ID.equals(other.Employee_ID))

				return false;

			if (this.Street_ID == null) {
				if (other.Street_ID != null)
					return false;

			} else if (!this.Street_ID.equals(other.Street_ID))

				return false;

			if (this.Product_ID == null) {
				if (other.Product_ID != null)
					return false;

			} else if (!this.Product_ID.equals(other.Product_ID))

				return false;

			if (this.Order_Date == null) {
				if (other.Order_Date != null)
					return false;

			} else if (!this.Order_Date.equals(other.Order_Date))

				return false;

			if (this.Order_ID == null) {
				if (other.Order_ID != null)
					return false;

			} else if (!this.Order_ID.equals(other.Order_ID))

				return false;

			return true;
		}

		public void copyDataTo(order_factStruct other) {

			other.Customer_ID = this.Customer_ID;
			other.Employee_ID = this.Employee_ID;
			other.Street_ID = this.Street_ID;
			other.Product_ID = this.Product_ID;
			other.Order_Date = this.Order_Date;
			other.Order_ID = this.Order_ID;
			other.Order_Type = this.Order_Type;
			other.Delivery_Date = this.Delivery_Date;
			other.Quantity = this.Quantity;
			other.Total_Retail_Proce = this.Total_Retail_Proce;
			other.Costprice_Per_Unit = this.Costprice_Per_Unit;
			other.Discount = this.Discount;

		}

		public void copyKeysDataTo(order_factStruct other) {

			other.Customer_ID = this.Customer_ID;
			other.Employee_ID = this.Employee_ID;
			other.Street_ID = this.Street_ID;
			other.Product_ID = this.Product_ID;
			other.Order_Date = this.Order_Date;
			other.Order_ID = this.Order_ID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Customer_ID = null;
					} else {
						this.Customer_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Employee_ID = null;
					} else {
						this.Employee_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Street_ID = null;
					} else {
						this.Street_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Product_ID = null;
					} else {
						this.Product_ID = dis.readDouble();
					}

					this.Order_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Order_ID = null;
					} else {
						this.Order_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Order_Type = null;
					} else {
						this.Order_Type = dis.readDouble();
					}

					this.Delivery_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Total_Retail_Proce = null;
					} else {
						this.Total_Retail_Proce = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Costprice_Per_Unit = null;
					} else {
						this.Costprice_Per_Unit = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Discount = null;
					} else {
						this.Discount = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.Customer_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Customer_ID);
				}

				// Double

				if (this.Employee_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Employee_ID);
				}

				// Double

				if (this.Street_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Street_ID);
				}

				// Double

				if (this.Product_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Product_ID);
				}

				// java.util.Date

				writeDate(this.Order_Date, dos);

				// Double

				if (this.Order_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Order_ID);
				}

				// Double

				if (this.Order_Type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Order_Type);
				}

				// java.util.Date

				writeDate(this.Delivery_Date, dos);

				// Double

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Quantity);
				}

				// Double

				if (this.Total_Retail_Proce == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Total_Retail_Proce);
				}

				// Double

				if (this.Costprice_Per_Unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Costprice_Per_Unit);
				}

				// Double

				if (this.Discount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Discount);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Customer_ID=" + String.valueOf(Customer_ID));
			sb.append(",Employee_ID=" + String.valueOf(Employee_ID));
			sb.append(",Street_ID=" + String.valueOf(Street_ID));
			sb.append(",Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Order_Date=" + String.valueOf(Order_Date));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Order_Type=" + String.valueOf(Order_Type));
			sb.append(",Delivery_Date=" + String.valueOf(Delivery_Date));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",Total_Retail_Proce=" + String.valueOf(Total_Retail_Proce));
			sb.append(",Costprice_Per_Unit=" + String.valueOf(Costprice_Per_Unit));
			sb.append(",Discount=" + String.valueOf(Discount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_factStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Customer_ID, other.Customer_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Employee_ID, other.Employee_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Street_ID, other.Street_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Product_ID, other.Product_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Order_Date, other.Order_Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Order_ID, other.Order_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class order_itemStruct implements routines.system.IPersistableRow<order_itemStruct> {
		final static byte[] commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		static byte[] commonByteArray_ORIONPROJET1_Job05_Order_Fact = new byte[0];

		public Double ORDER_ID;

		public Double getORDER_ID() {
			return this.ORDER_ID;
		}

		public Double ORDER_ITEM_NUM;

		public Double getORDER_ITEM_NUM() {
			return this.ORDER_ITEM_NUM;
		}

		public Double PRODUCT_ID;

		public Double getPRODUCT_ID() {
			return this.PRODUCT_ID;
		}

		public Double QUANTITY;

		public Double getQUANTITY() {
			return this.QUANTITY;
		}

		public Double DISCOUNT;

		public Double getDISCOUNT() {
			return this.DISCOUNT;
		}

		public Double TOTAL_RETAIL_PRICE;

		public Double getTOTAL_RETAIL_PRICE() {
			return this.TOTAL_RETAIL_PRICE;
		}

		public Double COSTPRICE_PER_UNIT;

		public Double getCOSTPRICE_PER_UNIT() {
			return this.COSTPRICE_PER_UNIT;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ID = null;
					} else {
						this.ORDER_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ITEM_NUM = null;
					} else {
						this.ORDER_ITEM_NUM = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRODUCT_ID = null;
					} else {
						this.PRODUCT_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY = null;
					} else {
						this.QUANTITY = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNT = null;
					} else {
						this.DISCOUNT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TOTAL_RETAIL_PRICE = null;
					} else {
						this.TOTAL_RETAIL_PRICE = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.COSTPRICE_PER_UNIT = null;
					} else {
						this.COSTPRICE_PER_UNIT = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.ORDER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORDER_ID);
				}

				// Double

				if (this.ORDER_ITEM_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORDER_ITEM_NUM);
				}

				// Double

				if (this.PRODUCT_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.PRODUCT_ID);
				}

				// Double

				if (this.QUANTITY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QUANTITY);
				}

				// Double

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DISCOUNT);
				}

				// Double

				if (this.TOTAL_RETAIL_PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TOTAL_RETAIL_PRICE);
				}

				// Double

				if (this.COSTPRICE_PER_UNIT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.COSTPRICE_PER_UNIT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDER_ID=" + String.valueOf(ORDER_ID));
			sb.append(",ORDER_ITEM_NUM=" + String.valueOf(ORDER_ITEM_NUM));
			sb.append(",PRODUCT_ID=" + String.valueOf(PRODUCT_ID));
			sb.append(",QUANTITY=" + String.valueOf(QUANTITY));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append(",TOTAL_RETAIL_PRICE=" + String.valueOf(TOTAL_RETAIL_PRICE));
			sb.append(",COSTPRICE_PER_UNIT=" + String.valueOf(COSTPRICE_PER_UNIT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_itemStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		static byte[] commonByteArray_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double ORDER_ID;

		public Double getORDER_ID() {
			return this.ORDER_ID;
		}

		public Double ORDER_ITEM_NUM;

		public Double getORDER_ITEM_NUM() {
			return this.ORDER_ITEM_NUM;
		}

		public Double PRODUCT_ID;

		public Double getPRODUCT_ID() {
			return this.PRODUCT_ID;
		}

		public Double QUANTITY;

		public Double getQUANTITY() {
			return this.QUANTITY;
		}

		public Double DISCOUNT;

		public Double getDISCOUNT() {
			return this.DISCOUNT;
		}

		public Double TOTAL_RETAIL_PRICE;

		public Double getTOTAL_RETAIL_PRICE() {
			return this.TOTAL_RETAIL_PRICE;
		}

		public Double COSTPRICE_PER_UNIT;

		public Double getCOSTPRICE_PER_UNIT() {
			return this.COSTPRICE_PER_UNIT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ORDER_ID == null) ? 0 : this.ORDER_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.ORDER_ID == null) {
				if (other.ORDER_ID != null)
					return false;

			} else if (!this.ORDER_ID.equals(other.ORDER_ID))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.ORDER_ID = this.ORDER_ID;
			other.ORDER_ITEM_NUM = this.ORDER_ITEM_NUM;
			other.PRODUCT_ID = this.PRODUCT_ID;
			other.QUANTITY = this.QUANTITY;
			other.DISCOUNT = this.DISCOUNT;
			other.TOTAL_RETAIL_PRICE = this.TOTAL_RETAIL_PRICE;
			other.COSTPRICE_PER_UNIT = this.COSTPRICE_PER_UNIT;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.ORDER_ID = this.ORDER_ID;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ID = null;
					} else {
						this.ORDER_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ITEM_NUM = null;
					} else {
						this.ORDER_ITEM_NUM = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRODUCT_ID = null;
					} else {
						this.PRODUCT_ID = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY = null;
					} else {
						this.QUANTITY = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNT = null;
					} else {
						this.DISCOUNT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TOTAL_RETAIL_PRICE = null;
					} else {
						this.TOTAL_RETAIL_PRICE = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.COSTPRICE_PER_UNIT = null;
					} else {
						this.COSTPRICE_PER_UNIT = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.ORDER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORDER_ID);
				}

				// Double

				if (this.ORDER_ITEM_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORDER_ITEM_NUM);
				}

				// Double

				if (this.PRODUCT_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.PRODUCT_ID);
				}

				// Double

				if (this.QUANTITY == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.QUANTITY);
				}

				// Double

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DISCOUNT);
				}

				// Double

				if (this.TOTAL_RETAIL_PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TOTAL_RETAIL_PRICE);
				}

				// Double

				if (this.COSTPRICE_PER_UNIT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.COSTPRICE_PER_UNIT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDER_ID=" + String.valueOf(ORDER_ID));
			sb.append(",ORDER_ITEM_NUM=" + String.valueOf(ORDER_ITEM_NUM));
			sb.append(",PRODUCT_ID=" + String.valueOf(PRODUCT_ID));
			sb.append(",QUANTITY=" + String.valueOf(QUANTITY));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append(",TOTAL_RETAIL_PRICE=" + String.valueOf(TOTAL_RETAIL_PRICE));
			sb.append(",COSTPRICE_PER_UNIT=" + String.valueOf(COSTPRICE_PER_UNIT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ORDER_ID, other.ORDER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				order_itemStruct order_item = new order_itemStruct();
				order_factStruct order_fact = new order_factStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_fact");
				}

				int tos_count_tDBOutput_2 = 0;

				int updateKeyCount_tDBOutput_2 = 6;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "Order_Fact";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "oriondb" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "oriondb" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:7WBIOMjuWQxt4rb76j+r85D6LSGorakGAEypEQ==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtDrop_tDBOutput_2.execute("DROP TABLE `" + tableName_tDBOutput_2 + "`");
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2
							+ "`(`Customer_ID` DOUBLE(64,0)  ,`Employee_ID` DOUBLE(64,0)  ,`Street_ID` DOUBLE(64,0)  ,`Product_ID` DOUBLE(64,0)  ,`Order_Date` TIMESTAMP ,`Order_ID` DOUBLE(64,0)  ,`Order_Type` DOUBLE(64,0)  ,`Delivery_Date` TIMESTAMP ,`Quantity` DOUBLE(64,0)  ,`Total_Retail_Proce` DOUBLE(64,0)  ,`Costprice_Per_Unit` DOUBLE(64,0)  ,`Discount` DOUBLE(64,0)  ,primary key(`Customer_ID`,`Employee_ID`,`Street_ID`,`Product_ID`,`Order_Date`,`Order_ID`))");
				}
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `" + "Order_Fact"
								+ "` WHERE `Customer_ID` = ? AND `Employee_ID` = ? AND `Street_ID` = ? AND `Product_ID` = ? AND `Order_Date` = ? AND `Order_ID` = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO `" + "Order_Fact"
						+ "` (`Customer_ID`,`Employee_ID`,`Street_ID`,`Product_ID`,`Order_Date`,`Order_ID`,`Order_Type`,`Delivery_Date`,`Quantity`,`Total_Retail_Proce`,`Costprice_Per_Unit`,`Discount`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE `" + "Order_Fact"
						+ "` SET `Order_Type` = ?,`Delivery_Date` = ?,`Quantity` = ?,`Total_Retail_Proce` = ?,`Costprice_Per_Unit` = ?,`Discount` = ? WHERE `Customer_ID` = ? AND `Employee_ID` = ? AND `Street_ID` = ? AND `Product_ID` = ? AND `Order_Date` = ? AND `Order_ID` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_item");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<orderStruct> tHash_Lookup_order = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<orderStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<orderStruct>) globalMap
						.get("tHash_Lookup_order"));

				orderStruct orderHashKey = new orderStruct();
				orderStruct orderDefault = new orderStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct> tHash_Lookup_customer = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct>) globalMap
						.get("tHash_Lookup_customer"));

				customerStruct customerHashKey = new customerStruct();
				customerStruct customerDefault = new customerStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				order_factStruct order_fact_tmp = new order_factStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_1);

				String url_tDBInput_1 = "jdbc:ucanaccess://"
						+ "C:/Users/khalil/Downloads/projet orion/source des données/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_1 = "";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:utzwta2PJrsQ4l9w2TidQF1VLBZsmNvGy4b84Q==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String atnParams_tDBInput_1 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_1 = atnParams_tDBInput_1.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_1 = new java.util.Properties();
				atnParamsPrope_tDBInput_1.put("user", dbUser_tDBInput_1);
				atnParamsPrope_tDBInput_1.put("password", dbPwd_tDBInput_1);
				atnParamsPrope_tDBInput_1.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_1.getBytes()));
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, atnParamsPrope_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  ORDER_ITEM.ORDER_ID, \n  ORDER_ITEM.ORDER_ITEM_NUM, \n  ORDER_ITEM.PRODUCT_ID, \n  ORDER_ITEM.QUANTITY, \n  ORDER"
						+ "_ITEM.DISCOUNT, \n  ORDER_ITEM.TOTAL_RETAIL_PRICE, \n  ORDER_ITEM.COSTPRICE_PER_UNIT\nFROM ORDER_ITEM";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							order_item.ORDER_ID = null;
						} else {

							order_item.ORDER_ID = rs_tDBInput_1.getDouble(1);
							if (rs_tDBInput_1.wasNull()) {
								order_item.ORDER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							order_item.ORDER_ITEM_NUM = null;
						} else {

							order_item.ORDER_ITEM_NUM = rs_tDBInput_1.getDouble(2);
							if (rs_tDBInput_1.wasNull()) {
								order_item.ORDER_ITEM_NUM = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							order_item.PRODUCT_ID = null;
						} else {

							order_item.PRODUCT_ID = rs_tDBInput_1.getDouble(3);
							if (rs_tDBInput_1.wasNull()) {
								order_item.PRODUCT_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							order_item.QUANTITY = null;
						} else {

							order_item.QUANTITY = rs_tDBInput_1.getDouble(4);
							if (rs_tDBInput_1.wasNull()) {
								order_item.QUANTITY = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							order_item.DISCOUNT = null;
						} else {

							order_item.DISCOUNT = rs_tDBInput_1.getDouble(5);
							if (rs_tDBInput_1.wasNull()) {
								order_item.DISCOUNT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							order_item.TOTAL_RETAIL_PRICE = null;
						} else {

							order_item.TOTAL_RETAIL_PRICE = rs_tDBInput_1.getDouble(6);
							if (rs_tDBInput_1.wasNull()) {
								order_item.TOTAL_RETAIL_PRICE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							order_item.COSTPRICE_PER_UNIT = null;
						} else {

							order_item.COSTPRICE_PER_UNIT = rs_tDBInput_1.getDouble(7);
							if (rs_tDBInput_1.wasNull()) {
								order_item.COSTPRICE_PER_UNIT = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "order_item");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "order"
						///////////////////////////////////////////////

						boolean forceLooporder = false;

						orderStruct orderObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							orderHashKey.ORDER_ID = order_item.ORDER_ID;

							orderHashKey.hashCodeDirty = true;

							tHash_Lookup_order.lookup(orderHashKey);

						} // G_TM_M_020

						if (tHash_Lookup_order != null && tHash_Lookup_order.getCount(orderHashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'order' and it contains more one result from keys : order.ORDER_ID = '" +
							// orderHashKey.ORDER_ID + "'");
						} // G 071

						orderStruct order = null;

						orderStruct fromLookup_order = null;
						order = orderDefault;

						if (tHash_Lookup_order != null && tHash_Lookup_order.hasNext()) { // G 099

							fromLookup_order = tHash_Lookup_order.next();

						} // G 099

						if (fromLookup_order != null) {
							order = fromLookup_order;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "customer"
						///////////////////////////////////////////////

						boolean forceLoopcustomer = false;

						customerStruct customerObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							customerHashKey.CUSTOMER_ID = order.CUSTOMER_ID;

							customerHashKey.hashCodeDirty = true;

							tHash_Lookup_customer.lookup(customerHashKey);

						} // G_TM_M_020

						if (tHash_Lookup_customer != null && tHash_Lookup_customer.getCount(customerHashKey) > 1) { // G
																													// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'customer' and it contains more one result from keys : customer.CUSTOMER_ID =
							// '" + customerHashKey.CUSTOMER_ID + "'");
						} // G 071

						customerStruct customer = null;

						customerStruct fromLookup_customer = null;
						customer = customerDefault;

						if (tHash_Lookup_customer != null && tHash_Lookup_customer.hasNext()) { // G 099

							fromLookup_customer = tHash_Lookup_customer.next();

						} // G 099

						if (fromLookup_customer != null) {
							customer = fromLookup_customer;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							order_fact = null;

// # Output table : 'order_fact'
							order_fact_tmp.Customer_ID = customer.CUSTOMER_ID;
							order_fact_tmp.Employee_ID = order.EMPLOYEE_ID;
							order_fact_tmp.Street_ID = customer.STREET_ID;
							order_fact_tmp.Product_ID = order_item.PRODUCT_ID;
							order_fact_tmp.Order_Date = order.ORDER_DATE;
							order_fact_tmp.Order_ID = order.ORDER_ID;
							order_fact_tmp.Order_Type = order.ORDER_TYPE;
							order_fact_tmp.Delivery_Date = order.DELIVERY_DATE;
							order_fact_tmp.Quantity = order_item.QUANTITY;
							order_fact_tmp.Total_Retail_Proce = order_item.TOTAL_RETAIL_PRICE;
							order_fact_tmp.Costprice_Per_Unit = order_item.COSTPRICE_PER_UNIT;
							order_fact_tmp.Discount = order_item.DISCOUNT;
							order_fact = order_fact_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "order_fact"
						if (order_fact != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "order_fact");
							}

							whetherReject_tDBOutput_2 = false;
							if (order_fact.Customer_ID == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(1, order_fact.Customer_ID);
							}

							if (order_fact.Employee_ID == null) {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(2, order_fact.Employee_ID);
							}

							if (order_fact.Street_ID == null) {
								pstmt_tDBOutput_2.setNull(3, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(3, order_fact.Street_ID);
							}

							if (order_fact.Product_ID == null) {
								pstmt_tDBOutput_2.setNull(4, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(4, order_fact.Product_ID);
							}

							if (order_fact.Order_Date != null) {
								date_tDBOutput_2 = order_fact.Order_Date.getTime();
								if (date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
									pstmt_tDBOutput_2.setString(5, "0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_2.setTimestamp(5, new java.sql.Timestamp(date_tDBOutput_2));
								}
							} else {
								pstmt_tDBOutput_2.setNull(5, java.sql.Types.DATE);
							}

							if (order_fact.Order_ID == null) {
								pstmt_tDBOutput_2.setNull(6, java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(6, order_fact.Order_ID);
							}

							int checkCount_tDBOutput_2 = -1;
							try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
								while (rs_tDBOutput_2.next()) {
									checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
								}
							}
							if (checkCount_tDBOutput_2 > 0) {
								if (order_fact.Order_Type == null) {
									pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(1, order_fact.Order_Type);
								}

								if (order_fact.Delivery_Date != null) {
									date_tDBOutput_2 = order_fact.Delivery_Date.getTime();
									if (date_tDBOutput_2 < year1_tDBOutput_2
											|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
										pstmtUpdate_tDBOutput_2.setString(2, "0000-00-00 00:00:00");
									} else {
										pstmtUpdate_tDBOutput_2.setTimestamp(2,
												new java.sql.Timestamp(date_tDBOutput_2));
									}
								} else {
									pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.DATE);
								}

								if (order_fact.Quantity == null) {
									pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(3, order_fact.Quantity);
								}

								if (order_fact.Total_Retail_Proce == null) {
									pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(4, order_fact.Total_Retail_Proce);
								}

								if (order_fact.Costprice_Per_Unit == null) {
									pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(5, order_fact.Costprice_Per_Unit);
								}

								if (order_fact.Discount == null) {
									pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(6, order_fact.Discount);
								}

								if (order_fact.Customer_ID == null) {
									pstmtUpdate_tDBOutput_2.setNull(7 + count_tDBOutput_2, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(7 + count_tDBOutput_2, order_fact.Customer_ID);
								}

								if (order_fact.Employee_ID == null) {
									pstmtUpdate_tDBOutput_2.setNull(8 + count_tDBOutput_2, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(8 + count_tDBOutput_2, order_fact.Employee_ID);
								}

								if (order_fact.Street_ID == null) {
									pstmtUpdate_tDBOutput_2.setNull(9 + count_tDBOutput_2, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(9 + count_tDBOutput_2, order_fact.Street_ID);
								}

								if (order_fact.Product_ID == null) {
									pstmtUpdate_tDBOutput_2.setNull(10 + count_tDBOutput_2, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(10 + count_tDBOutput_2, order_fact.Product_ID);
								}

								if (order_fact.Order_Date != null) {
									pstmtUpdate_tDBOutput_2.setTimestamp(11 + count_tDBOutput_2,
											new java.sql.Timestamp(order_fact.Order_Date.getTime()));
								} else {
									pstmtUpdate_tDBOutput_2.setNull(11 + count_tDBOutput_2, java.sql.Types.TIMESTAMP);
								}

								if (order_fact.Order_ID == null) {
									pstmtUpdate_tDBOutput_2.setNull(12 + count_tDBOutput_2, java.sql.Types.DOUBLE);
								} else {
									pstmtUpdate_tDBOutput_2.setDouble(12 + count_tDBOutput_2, order_fact.Order_ID);
								}

								try {
									updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2
											+ pstmtUpdate_tDBOutput_2.executeUpdate();
									nb_line_tDBOutput_2++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_2 = true;
									throw (e);
								}
							} else {
								if (order_fact.Customer_ID == null) {
									pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(1, order_fact.Customer_ID);
								}

								if (order_fact.Employee_ID == null) {
									pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(2, order_fact.Employee_ID);
								}

								if (order_fact.Street_ID == null) {
									pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(3, order_fact.Street_ID);
								}

								if (order_fact.Product_ID == null) {
									pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(4, order_fact.Product_ID);
								}

								if (order_fact.Order_Date != null) {
									date_tDBOutput_2 = order_fact.Order_Date.getTime();
									if (date_tDBOutput_2 < year1_tDBOutput_2
											|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
										pstmtInsert_tDBOutput_2.setString(5, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tDBOutput_2.setTimestamp(5,
												new java.sql.Timestamp(date_tDBOutput_2));
									}
								} else {
									pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.DATE);
								}

								if (order_fact.Order_ID == null) {
									pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(6, order_fact.Order_ID);
								}

								if (order_fact.Order_Type == null) {
									pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(7, order_fact.Order_Type);
								}

								if (order_fact.Delivery_Date != null) {
									date_tDBOutput_2 = order_fact.Delivery_Date.getTime();
									if (date_tDBOutput_2 < year1_tDBOutput_2
											|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
										pstmtInsert_tDBOutput_2.setString(8, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tDBOutput_2.setTimestamp(8,
												new java.sql.Timestamp(date_tDBOutput_2));
									}
								} else {
									pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.DATE);
								}

								if (order_fact.Quantity == null) {
									pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(9, order_fact.Quantity);
								}

								if (order_fact.Total_Retail_Proce == null) {
									pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(10, order_fact.Total_Retail_Proce);
								}

								if (order_fact.Costprice_Per_Unit == null) {
									pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(11, order_fact.Costprice_Per_Unit);
								}

								if (order_fact.Discount == null) {
									pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_2.setDouble(12, order_fact.Discount);
								}

								try {
									insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2
											+ pstmtInsert_tDBOutput_2.executeUpdate();
									nb_line_tDBOutput_2++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_2 = true;
									throw (e);
								}
							}
							commitCounter_tDBOutput_2++;

							if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

								conn_tDBOutput_2.commit();
								commitCounter_tDBOutput_2 = 0;

							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "order_fact"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_order != null) {
					tHash_Lookup_order.endGet();
				}
				globalMap.remove("tHash_Lookup_order");

				if (tHash_Lookup_customer != null) {
					tHash_Lookup_customer.endGet();
				}
				globalMap.remove("tHash_Lookup_customer");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_item");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order_fact");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_order");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_customer");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
						if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_2")) != null) {
							pstmtUpdateToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
						if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_2")) != null) {
							pstmtInsertToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class orderStruct implements routines.system.IPersistableComparableLookupRow<orderStruct> {
		final static byte[] commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		static byte[] commonByteArray_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double ORDER_ID;

		public Double getORDER_ID() {
			return this.ORDER_ID;
		}

		public Double ORDER_TYPE;

		public Double getORDER_TYPE() {
			return this.ORDER_TYPE;
		}

		public Double EMPLOYEE_ID;

		public Double getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public Double CUSTOMER_ID;

		public Double getCUSTOMER_ID() {
			return this.CUSTOMER_ID;
		}

		public java.util.Date ORDER_DATE;

		public java.util.Date getORDER_DATE() {
			return this.ORDER_DATE;
		}

		public java.util.Date DELIVERY_DATE;

		public java.util.Date getDELIVERY_DATE() {
			return this.DELIVERY_DATE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ORDER_ID == null) ? 0 : this.ORDER_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final orderStruct other = (orderStruct) obj;

			if (this.ORDER_ID == null) {
				if (other.ORDER_ID != null)
					return false;

			} else if (!this.ORDER_ID.equals(other.ORDER_ID))

				return false;

			return true;
		}

		public void copyDataTo(orderStruct other) {

			other.ORDER_ID = this.ORDER_ID;
			other.ORDER_TYPE = this.ORDER_TYPE;
			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.CUSTOMER_ID = this.CUSTOMER_ID;
			other.ORDER_DATE = this.ORDER_DATE;
			other.DELIVERY_DATE = this.DELIVERY_DATE;

		}

		public void copyKeysDataTo(orderStruct other) {

			other.ORDER_ID = this.ORDER_ID;

		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ORDER_ID = null;
					} else {
						this.ORDER_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.ORDER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORDER_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.ORDER_TYPE = null;
				} else {
					this.ORDER_TYPE = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.EMPLOYEE_ID = null;
				} else {
					this.EMPLOYEE_ID = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.CUSTOMER_ID = null;
				} else {
					this.CUSTOMER_ID = dis.readDouble();
				}

				this.ORDER_DATE = readDate(dis, ois);

				this.DELIVERY_DATE = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.ORDER_TYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ORDER_TYPE);
				}

				if (this.EMPLOYEE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.EMPLOYEE_ID);
				}

				if (this.CUSTOMER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CUSTOMER_ID);
				}

				writeDate(this.ORDER_DATE, dos, oos);

				writeDate(this.DELIVERY_DATE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ORDER_ID=" + String.valueOf(ORDER_ID));
			sb.append(",ORDER_TYPE=" + String.valueOf(ORDER_TYPE));
			sb.append(",EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",CUSTOMER_ID=" + String.valueOf(CUSTOMER_ID));
			sb.append(",ORDER_DATE=" + String.valueOf(ORDER_DATE));
			sb.append(",DELIVERY_DATE=" + String.valueOf(DELIVERY_DATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(orderStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ORDER_ID, other.ORDER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				orderStruct order = new orderStruct();

				/**
				 * [tAdvancedHash_order begin ] start
				 */

				ok_Hash.put("tAdvancedHash_order", false);
				start_Hash.put("tAdvancedHash_order", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_order";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order");
				}

				int tos_count_tAdvancedHash_order = 0;

				// connection name:order
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(order,order) |
				// target node:tAdvancedHash_order - inputs:(order) outputs:()
				// linked node: tMap_1 - inputs:(order_item,order,customer) outputs:(order_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_order = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<orderStruct> tHash_Lookup_order = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<orderStruct>getLookup(matchingModeEnum_order);

				globalMap.put("tHash_Lookup_order", tHash_Lookup_order);

				/**
				 * [tAdvancedHash_order begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_2);

				String url_tDBInput_2 = "jdbc:ucanaccess://"
						+ "C:/Users/khalil/Downloads/projet orion/source des données/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_2 = "";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:nvuau1gmhgGLnQk/VAiJBWpH5XAfw2r4zpMRDg==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
				atnParamsPrope_tDBInput_2.put("user", dbUser_tDBInput_2);
				atnParamsPrope_tDBInput_2.put("password", dbPwd_tDBInput_2);
				atnParamsPrope_tDBInput_2.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_2.getBytes()));
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, atnParamsPrope_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  ORDERS.ORDER_ID, \n  ORDERS.ORDER_TYPE, \n  ORDERS.EMPLOYEE_ID, \n  ORDERS.CUSTOMER_ID, \n  ORDERS.ORDER_DATE, \n "
						+ " ORDERS.DELIVERY_DATE\nFROM ORDERS";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							order.ORDER_ID = null;
						} else {

							order.ORDER_ID = rs_tDBInput_2.getDouble(1);
							if (rs_tDBInput_2.wasNull()) {
								order.ORDER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							order.ORDER_TYPE = null;
						} else {

							order.ORDER_TYPE = rs_tDBInput_2.getDouble(2);
							if (rs_tDBInput_2.wasNull()) {
								order.ORDER_TYPE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							order.EMPLOYEE_ID = null;
						} else {

							order.EMPLOYEE_ID = rs_tDBInput_2.getDouble(3);
							if (rs_tDBInput_2.wasNull()) {
								order.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							order.CUSTOMER_ID = null;
						} else {

							order.CUSTOMER_ID = rs_tDBInput_2.getDouble(4);
							if (rs_tDBInput_2.wasNull()) {
								order.CUSTOMER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							order.ORDER_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_2 = rs_tDBInput_2.getTimestamp(5);
							if (timestamp_tDBInput_2 != null) {
								order.ORDER_DATE = new java.util.Date(timestamp_tDBInput_2.getTime());
							} else {
								order.ORDER_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							order.DELIVERY_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_2 = rs_tDBInput_2.getTimestamp(6);
							if (timestamp_tDBInput_2 != null) {
								order.DELIVERY_DATE = new java.util.Date(timestamp_tDBInput_2.getTime());
							} else {
								order.DELIVERY_DATE = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order main ] start
						 */

						currentComponent = "tAdvancedHash_order";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "order");
						}

						orderStruct order_HashRow = new orderStruct();

						order_HashRow.ORDER_ID = order.ORDER_ID;

						order_HashRow.ORDER_TYPE = order.ORDER_TYPE;

						order_HashRow.EMPLOYEE_ID = order.EMPLOYEE_ID;

						order_HashRow.CUSTOMER_ID = order.CUSTOMER_ID;

						order_HashRow.ORDER_DATE = order.ORDER_DATE;

						order_HashRow.DELIVERY_DATE = order.DELIVERY_DATE;

						tHash_Lookup_order.put(order_HashRow);

						tos_count_tAdvancedHash_order++;

						/**
						 * [tAdvancedHash_order main ] stop
						 */

						/**
						 * [tAdvancedHash_order process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_order";

						/**
						 * [tAdvancedHash_order process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_order process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_order";

						/**
						 * [tAdvancedHash_order process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_order end ] start
				 */

				currentComponent = "tAdvancedHash_order";

				tHash_Lookup_order.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "order");
				}

				ok_Hash.put("tAdvancedHash_order", true);
				end_Hash.put("tAdvancedHash_order", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_order end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_order finally ] start
				 */

				currentComponent = "tAdvancedHash_order";

				/**
				 * [tAdvancedHash_order finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class customerStruct implements routines.system.IPersistableComparableLookupRow<customerStruct> {
		final static byte[] commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		static byte[] commonByteArray_ORIONPROJET1_Job05_Order_Fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Double CUSTOMER_ID;

		public Double getCUSTOMER_ID() {
			return this.CUSTOMER_ID;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String PERSONAL_ID;

		public String getPERSONAL_ID() {
			return this.PERSONAL_ID;
		}

		public String CUSTOMER_NAME;

		public String getCUSTOMER_NAME() {
			return this.CUSTOMER_NAME;
		}

		public String CUSTOMER_FIRSTNAME;

		public String getCUSTOMER_FIRSTNAME() {
			return this.CUSTOMER_FIRSTNAME;
		}

		public String CUSTOMER_LASTNAME;

		public String getCUSTOMER_LASTNAME() {
			return this.CUSTOMER_LASTNAME;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String CUSTOMER_ADDRESS;

		public String getCUSTOMER_ADDRESS() {
			return this.CUSTOMER_ADDRESS;
		}

		public Double STREET_ID;

		public Double getSTREET_ID() {
			return this.STREET_ID;
		}

		public String STREET_NUMBER;

		public String getSTREET_NUMBER() {
			return this.STREET_NUMBER;
		}

		public Double CUSTOMER_TYPE_ID;

		public Double getCUSTOMER_TYPE_ID() {
			return this.CUSTOMER_TYPE_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CUSTOMER_ID == null) ? 0 : this.CUSTOMER_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final customerStruct other = (customerStruct) obj;

			if (this.CUSTOMER_ID == null) {
				if (other.CUSTOMER_ID != null)
					return false;

			} else if (!this.CUSTOMER_ID.equals(other.CUSTOMER_ID))

				return false;

			return true;
		}

		public void copyDataTo(customerStruct other) {

			other.CUSTOMER_ID = this.CUSTOMER_ID;
			other.COUNTRY = this.COUNTRY;
			other.GENDER = this.GENDER;
			other.PERSONAL_ID = this.PERSONAL_ID;
			other.CUSTOMER_NAME = this.CUSTOMER_NAME;
			other.CUSTOMER_FIRSTNAME = this.CUSTOMER_FIRSTNAME;
			other.CUSTOMER_LASTNAME = this.CUSTOMER_LASTNAME;
			other.BIRTH_DATE = this.BIRTH_DATE;
			other.CUSTOMER_ADDRESS = this.CUSTOMER_ADDRESS;
			other.STREET_ID = this.STREET_ID;
			other.STREET_NUMBER = this.STREET_NUMBER;
			other.CUSTOMER_TYPE_ID = this.CUSTOMER_TYPE_ID;

		}

		public void copyKeysDataTo(customerStruct other) {

			other.CUSTOMER_ID = this.CUSTOMER_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORIONPROJET1_Job05_Order_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.CUSTOMER_ID = null;
					} else {
						this.CUSTOMER_ID = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.CUSTOMER_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CUSTOMER_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.COUNTRY = readString(dis, ois);

				this.GENDER = readString(dis, ois);

				this.PERSONAL_ID = readString(dis, ois);

				this.CUSTOMER_NAME = readString(dis, ois);

				this.CUSTOMER_FIRSTNAME = readString(dis, ois);

				this.CUSTOMER_LASTNAME = readString(dis, ois);

				this.BIRTH_DATE = readDate(dis, ois);

				this.CUSTOMER_ADDRESS = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.STREET_ID = null;
				} else {
					this.STREET_ID = dis.readDouble();
				}

				this.STREET_NUMBER = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.CUSTOMER_TYPE_ID = null;
				} else {
					this.CUSTOMER_TYPE_ID = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.COUNTRY, dos, oos);

				writeString(this.GENDER, dos, oos);

				writeString(this.PERSONAL_ID, dos, oos);

				writeString(this.CUSTOMER_NAME, dos, oos);

				writeString(this.CUSTOMER_FIRSTNAME, dos, oos);

				writeString(this.CUSTOMER_LASTNAME, dos, oos);

				writeDate(this.BIRTH_DATE, dos, oos);

				writeString(this.CUSTOMER_ADDRESS, dos, oos);

				if (this.STREET_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.STREET_ID);
				}

				writeString(this.STREET_NUMBER, dos, oos);

				if (this.CUSTOMER_TYPE_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CUSTOMER_TYPE_ID);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CUSTOMER_ID=" + String.valueOf(CUSTOMER_ID));
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",GENDER=" + GENDER);
			sb.append(",PERSONAL_ID=" + PERSONAL_ID);
			sb.append(",CUSTOMER_NAME=" + CUSTOMER_NAME);
			sb.append(",CUSTOMER_FIRSTNAME=" + CUSTOMER_FIRSTNAME);
			sb.append(",CUSTOMER_LASTNAME=" + CUSTOMER_LASTNAME);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",CUSTOMER_ADDRESS=" + CUSTOMER_ADDRESS);
			sb.append(",STREET_ID=" + String.valueOf(STREET_ID));
			sb.append(",STREET_NUMBER=" + STREET_NUMBER);
			sb.append(",CUSTOMER_TYPE_ID=" + String.valueOf(CUSTOMER_TYPE_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(customerStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CUSTOMER_ID, other.CUSTOMER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				customerStruct customer = new customerStruct();

				/**
				 * [tAdvancedHash_customer begin ] start
				 */

				ok_Hash.put("tAdvancedHash_customer", false);
				start_Hash.put("tAdvancedHash_customer", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_customer";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "customer");
				}

				int tos_count_tAdvancedHash_customer = 0;

				// connection name:customer
				// source node:tDBInput_3 - inputs:(after_tDBInput_1)
				// outputs:(customer,customer) | target node:tAdvancedHash_customer -
				// inputs:(customer) outputs:()
				// linked node: tMap_1 - inputs:(order_item,order,customer) outputs:(order_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_customer = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customerStruct> tHash_Lookup_customer = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<customerStruct>getLookup(matchingModeEnum_customer);

				globalMap.put("tHash_Lookup_customer", tHash_Lookup_customer);

				/**
				 * [tAdvancedHash_customer begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_3);

				String url_tDBInput_3 = "jdbc:ucanaccess://"
						+ "C:/Users/khalil/Downloads/projet orion/source des données/orion.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_3 = "";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:OKz2e1Del+T3GEhe5hUeG39DFTelM7SwQE6wVQ==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String atnParams_tDBInput_3 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_3 = atnParams_tDBInput_3.replaceAll("&", "\n");
				java.util.Properties atnParamsPrope_tDBInput_3 = new java.util.Properties();
				atnParamsPrope_tDBInput_3.put("user", dbUser_tDBInput_3);
				atnParamsPrope_tDBInput_3.put("password", dbPwd_tDBInput_3);
				atnParamsPrope_tDBInput_3.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_3.getBytes()));
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, atnParamsPrope_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  CUSTOMER.CUSTOMER_ID, \n  CUSTOMER.COUNTRY, \n  CUSTOMER.GENDER, \n  CUSTOMER.PERSONAL_ID, \n  CUSTOMER.CUSTOMER_"
						+ "NAME, \n  CUSTOMER.CUSTOMER_FIRSTNAME, \n  CUSTOMER.CUSTOMER_LASTNAME, \n  CUSTOMER.BIRTH_DATE, \n  CUSTOMER.CUSTOMER_ADDRES"
						+ "S, \n  CUSTOMER.STREET_ID, \n  CUSTOMER.STREET_NUMBER, \n  CUSTOMER.CUSTOMER_TYPE_ID\nFROM CUSTOMER";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							customer.CUSTOMER_ID = null;
						} else {

							customer.CUSTOMER_ID = rs_tDBInput_3.getDouble(1);
							if (rs_tDBInput_3.wasNull()) {
								customer.CUSTOMER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							customer.COUNTRY = null;
						} else {

							customer.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							customer.GENDER = null;
						} else {

							customer.GENDER = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							customer.PERSONAL_ID = null;
						} else {

							customer.PERSONAL_ID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							customer.CUSTOMER_NAME = null;
						} else {

							customer.CUSTOMER_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							customer.CUSTOMER_FIRSTNAME = null;
						} else {

							customer.CUSTOMER_FIRSTNAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							customer.CUSTOMER_LASTNAME = null;
						} else {

							customer.CUSTOMER_LASTNAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							customer.BIRTH_DATE = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_3 = rs_tDBInput_3.getTimestamp(8);
							if (timestamp_tDBInput_3 != null) {
								customer.BIRTH_DATE = new java.util.Date(timestamp_tDBInput_3.getTime());
							} else {
								customer.BIRTH_DATE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							customer.CUSTOMER_ADDRESS = null;
						} else {

							customer.CUSTOMER_ADDRESS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							customer.STREET_ID = null;
						} else {

							customer.STREET_ID = rs_tDBInput_3.getDouble(10);
							if (rs_tDBInput_3.wasNull()) {
								customer.STREET_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							customer.STREET_NUMBER = null;
						} else {

							customer.STREET_NUMBER = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							customer.CUSTOMER_TYPE_ID = null;
						} else {

							customer.CUSTOMER_TYPE_ID = rs_tDBInput_3.getDouble(12);
							if (rs_tDBInput_3.wasNull()) {
								customer.CUSTOMER_TYPE_ID = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_customer main ] start
						 */

						currentComponent = "tAdvancedHash_customer";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "customer");
						}

						customerStruct customer_HashRow = new customerStruct();

						customer_HashRow.CUSTOMER_ID = customer.CUSTOMER_ID;

						customer_HashRow.COUNTRY = customer.COUNTRY;

						customer_HashRow.GENDER = customer.GENDER;

						customer_HashRow.PERSONAL_ID = customer.PERSONAL_ID;

						customer_HashRow.CUSTOMER_NAME = customer.CUSTOMER_NAME;

						customer_HashRow.CUSTOMER_FIRSTNAME = customer.CUSTOMER_FIRSTNAME;

						customer_HashRow.CUSTOMER_LASTNAME = customer.CUSTOMER_LASTNAME;

						customer_HashRow.BIRTH_DATE = customer.BIRTH_DATE;

						customer_HashRow.CUSTOMER_ADDRESS = customer.CUSTOMER_ADDRESS;

						customer_HashRow.STREET_ID = customer.STREET_ID;

						customer_HashRow.STREET_NUMBER = customer.STREET_NUMBER;

						customer_HashRow.CUSTOMER_TYPE_ID = customer.CUSTOMER_TYPE_ID;

						tHash_Lookup_customer.put(customer_HashRow);

						tos_count_tAdvancedHash_customer++;

						/**
						 * [tAdvancedHash_customer main ] stop
						 */

						/**
						 * [tAdvancedHash_customer process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_customer";

						/**
						 * [tAdvancedHash_customer process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_customer process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_customer";

						/**
						 * [tAdvancedHash_customer process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_customer end ] start
				 */

				currentComponent = "tAdvancedHash_customer";

				tHash_Lookup_customer.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "customer");
				}

				ok_Hash.put("tAdvancedHash_customer", true);
				end_Hash.put("tAdvancedHash_customer", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_customer end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_customer finally ] start
				 */

				currentComponent = "tAdvancedHash_customer";

				/**
				 * [tAdvancedHash_customer finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Job05_Order_Fact Job05_Order_FactClass = new Job05_Order_Fact();

		int exitCode = Job05_Order_FactClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Job05_Order_Fact.class.getClassLoader()
					.getResourceAsStream("orionprojet1/job05_order_fact_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Job05_Order_Fact.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job05_Order_Fact");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 129039 characters generated by Talend Open Studio for Data Integration on the
 * 21 mai 2021 12:30:33 WAT
 ************************************************************************************************/